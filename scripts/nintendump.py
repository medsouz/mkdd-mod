# -----------------------------------------------------------------------
# A rewrite of dumpinfo.idc that is tailored more towards Gamecube/Wii modding.
# (c) 2015 Matt "medsouz" Souza
#
from idaapi import *
from idautils import *
import time
# --------------------------------------------------------------------------
class FormatForm(Form):
	def __init__(self):
		self.invert = False
		Form.__init__(self, r"""STARTITEM NULL
BUTTON YES* Export
Nintendump
Select a format to export your database as:
<IDA *.idc:{idaIDC}>
<Dolphin *.map:{dolMap}>{exports}>
Written by Matt "medsouz" Souza
""", {
	'exports': Form.RadGroupControl(("dolMap", "idaIDC"))
	})
	def OnFormChange(self, fid):
		return 1
# --------------------------------------------------------------------------
def IDCExport():
	print("Starting IDC export");
	#Counts how many lines have been written
	i = 0
	#Ask for a file
	filePath = AskFile(1,"*.idc", "Where do you want to save the IDC file?");
	#Make sure a destination was selected
	if(filePath is not None):
		#Start the timer
		start_time = time.time()
		print("Saving to: %s" % (filePath))
		#Open the file
		f = open(filePath, 'w')
		#Clear the contents
		f.truncate()
		#Header stuff
		f.write("//Generated by Nintendump\n");
		f.write("#include <idc.idc>\n\n");
		f.write("static main () {\n")
		# Loop through all names
		for ea in range(MinEA(), MaxEA()):
			flags = GetFlags(ea)
			#TODO: Handle repeat comments
			if(flags & FF_NAME): #Name
				name = Name(ea)
				if(not name.startswith("nullsub_") and not name.startswith("def_") and not name.startswith("jpt_")):
					i = i + 1
					f.write("\tMakeName(0x%x, \"%s\");\n" % (ea, name));
			if(flags & FF_COMM): #Comment
				comment = Comment(ea)
				#Trim autogenerated comments to save on file space
				if(comment is not None and comment != "switch jump" and comment != "jump table for switch statement" and not re.match("switch [0-9]+ cases ", comment)):
					i = i + 1
					#Escape quotations to prevent the script from breaking
					comment = comment.replace("\"", "\\\"")
					#Handle newlines
					comment = comment.replace("\n", "\\n")
					f.write("\tMakeComm(0x%x, \"%s\");\n" % (ea, comment));
		#Close the function
		f.write("}\n")
		#Close the file
		f.close()
		print("%i lines" % (i));
		#TODO: Fix later
		if(i > 64000):
			#TODO: Verify that this is actually an issue. I read this somewhere and just assumed it is true
			print("WARNING: The number of lines is greater than 64k. Your IDC file might not work due to function size limits!");
		print("--------------------------------------------------------------------------")
		print("Execution took %s seconds" % (time.time() - start_time))
# --------------------------------------------------------------------------
def MAPExport():
	print("Starting MAP export");
	filePath = AskFile(1,"*.map", "Where do you want to save the MAP file?");
	if(filePath is not None):
		#Start the timer
		start_time = time.time()
		print("Saving to: %s" % (filePath))
		#Open the file
		f = open(filePath, 'w')
		#Clear the contents
		f.truncate()
		#Header stuff
		f.write(".text\n");
		for funcea in Functions(SegStart(MinEA()), SegEnd(MaxEA())):
			f.write("%x %0*X %x 0 %s\n" % (funcea, 8, FindFuncEnd(funcea) - funcea, funcea, GetFunctionName(funcea)))
		print("--------------------------------------------------------------------------")
		print("Execution took %s seconds" % (time.time() - start_time))
# --------------------------------------------------------------------------
def ida_main():
	# Create form
	global f
	f = FormatForm()
	# Compile (in order to populate the controls)
	f.Compile()
	# Execute the form
	ret = f.Execute()
	# Dispose the form
	f.Free()
	print("r=%d" % ret)
	if ret:
		if f.dolMap.selected:
			#Export functions as a *.map file
			MAPExport()
		elif f.idaIDC.selected:
			#Export everything as a *.idc file
			IDCExport()
# --------------------------------------------------------------------------
ida_main()
